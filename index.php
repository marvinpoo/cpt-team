<?php
/*
 * Plugin Name:       CPT: Mitarbeiter
 * Plugin URI:        https://mpw-immobilien.de/
 * Description:       Custom Post-Type: Team Mitglieder
 * Version:           1.0.0
 * Author:            MPW Immobilien
 * Author URI:        https://mpw-immobilien.de/
 * Text Domain:       cpt-team
 * License:           GPL-2.0+
 * License URI:       http://www.gnu.org/licenses/gpl-2.0.txt
 * Copyright since 4th December 2018  MPW-Immobilien Michael Werner GmbH
 */

 /* Copyright 2019  Marvin Borisch f端r MPW immobilien

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License, version 2, as
    published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

/** Custom Post Type **/
 function team_type() {

	$labels = array(
		'name'                  => _x( 'Mitarbeiter', 'Post Type General Name', 'cpt-team' ),
		'singular_name'         => _x( 'Mitarbeiter', 'Post Type Singular Name', 'cpt-team' ),
		'menu_name'             => __( 'Mitarbeiter', 'cpt-team' ),
		'name_admin_bar'        => __( 'Mitarbeiter', 'cpt-team' ),
		'archives'              => __( 'Mitarbeiter archiv', 'cpt-team' ),
		'attributes'            => __( 'Mitarbeiter Attribut', 'cpt-team' ),
		'parent_item_colon'     => __( 'Mitarbeiter Parent', 'cpt-team' ),
		'all_items'             => __( 'Alle Mitarbeiter', 'cpt-team' ),
		'add_new_item'          => __( 'Neuen Mitarbeiter hinzuf端gen', 'cpt-team' ),
		'add_new'               => __( 'Mitarbeiter Hinzuf端gen', 'cpt-team' ),
		'new_item'              => __( 'Neuer Mitarbeiter', 'cpt-team' ),
		'edit_item'             => __( 'Mitarbeiter bearbeiten', 'cpt-team' ),
		'update_item'           => __( 'Mitarbeiter aktualisieren', 'cpt-team' ),
		'view_item'             => __( 'Mitarbeiter ansehen', 'cpt-team' ),
		'view_items'            => __( 'Mitarbeiter ansehen', 'cpt-team' ),
		'search_items'          => __( 'Mitarbeiter suchen', 'cpt-team' ),
		'not_found'             => __( 'Mitarbeiter nicht gefunden', 'cpt-team' ),
		'not_found_in_trash'    => __( 'Mitarbeiter nicht im Papierkorb gefunden', 'cpt-team' ),
		'featured_image'        => __( 'Mitarbeiterfoto', 'cpt-team' ),
		'set_featured_image'    => __( 'Mitarbeiterfoto festlegen', 'cpt-team' ),
		'remove_featured_image' => __( 'Mitarbeiterfoto entfernen', 'cpt-team' ),
		'use_featured_image'    => __( 'Als Mitarbeiterfoto nutzen', 'cpt-team' ),
		'insert_into_item'      => __( 'Zu Mitarbeiter hinzuf端gen', 'cpt-team' ),
		'uploaded_to_this_item' => __( 'Zu Mitarbeiter hochladen', 'cpt-team' ),
		'items_list'            => __( 'Mitarbeiter Liste', 'cpt-team' ),
		'items_list_navigation' => __( 'Mitarbeiter Navigation', 'cpt-team' ),
		'filter_items_list'     => __( 'Mitarbeiter filtern', 'cpt-team' ),
	);
	$args = array(
		'label'                 => __( 'Mitarbeiter', 'cpt-team' ),
		'description'           => __( 'Team Mitglieder', 'cpt-team' ),
		'labels'                => $labels,
		'supports'              => array( 'title', 'editor', 'thumbnail' ),
		// 'taxonomies'            => array( 'category' ),
		'hierarchical'          => false,
		'public'                => true,
		'show_ui'               => true,
		'show_in_menu'          => true,
		'menu_position'         => 5,
		'menu_icon'             => 'dashicons-universal-access',
		'show_in_admin_bar'     => false,
		'show_in_nav_menus'     => true,
		'can_export'            => true,
		'has_archive'           => false,
		'exclude_from_search'   => true,
		'publicly_queryable'    => true,
		'capability_type'       => 'post',
	);
	register_post_type( 'mitarbeiter', $args );
}
add_action( 'init', 'team_type', 0 );


/** Abteilungen **/
function tr_create_my_taxonomy() {

    register_taxonomy(
        'Abteilung',
        'mitarbeiter',
        array(
            'label' => __( 'Abteilung' ),
            'rewrite' => array( 'slug' => 'team-abteilung' ),
            'hierarchical' => true,
        )
    );
}
add_action( 'init', 'tr_create_my_taxonomy' );

/**
 * Generated by the WordPress Meta Box Generator at http://goo.gl/8nwllb
 */
class cpt_team_meta {
	private $screens = array(
		'mitarbeiter',
	);
	private $fields = array(
		array(
			'id' => 'jobtitel',
			'label' => 'Jobtitel',
			'type' => 'text',
		),
		array(
			'id' => 'zitat',
			'label' => 'Zitat',
			'type' => 'textarea',
		),
	);

	/**
	 * Class construct method. Adds actions to their respective WordPress hooks.
	 */
	public function __construct() {
		add_action( 'add_meta_boxes', array( $this, 'add_meta_boxes' ) );
		add_action( 'save_post', array( $this, 'save_post' ) );
	}

	/**
	 * Hooks into WordPress' add_meta_boxes function.
	 * Goes through screens (post types) and adds the meta box.
	 */
	public function add_meta_boxes() {
		foreach ( $this->screens as $screen ) {
			add_meta_box(
				'mitarbeiter-informationen',
				__( 'Mitarbeiter Informationen', 'cpt-team' ),
				array( $this, 'add_meta_box_callback' ),
				$screen,
				'mitarbeiterinfo',
				'high'
			);
		}
	}

	/**
	 * Generates the HTML for the meta box
	 *
	 * @param object $post WordPress post object
	 */
	public function add_meta_box_callback( $post ) {
		wp_nonce_field( 'mitarbeiter_informationen_data', 'mitarbeiter_informationen_nonce' );
		$this->generate_fields( $post );
	}

	/**
	 * Generates the field's HTML for the meta box.
	 */
	public function generate_fields( $post ) {
		$output = '';
		foreach ( $this->fields as $field ) {
			$label = '<label for="' . $field['id'] . '">' . $field['label'] . '</label>';
			$db_value = get_post_meta( $post->ID, 'mitarbeiter_informationen_' . $field['id'], true );
			switch ( $field['type'] ) {
				case 'textarea':
					$input = sprintf(
						'<textarea class="large-text" id="%s" name="%s" rows="5">%s</textarea>',
						$field['id'],
						$field['id'],
						$db_value
					);
					break;
				default:
					$input = sprintf(
						'<input %s id="%s" name="%s" type="%s" value="%s">',
						$field['type'] !== 'color' ? 'class="regular-text"' : '',
						$field['id'],
						$field['id'],
						$field['type'],
						$db_value
					);
			}
			$output .= $this->row_format( $label, $input );
		}
		echo '<table class="form-table"><tbody>' . $output . '</tbody></table>';
	}

	/**
	 * Generates the HTML for table rows.
	 */
	public function row_format( $label, $input ) {
		return sprintf(
			'<tr><th scope="row">%s</th><td>%s</td></tr>',
			$label,
			$input
		);
	}
	/**
	 * Hooks into WordPress' save_post function
	 */
	public function save_post( $post_id ) {
		if ( ! isset( $_POST['mitarbeiter_informationen_nonce'] ) )
			return $post_id;

		$nonce = $_POST['mitarbeiter_informationen_nonce'];
		if ( !wp_verify_nonce( $nonce, 'mitarbeiter_informationen_data' ) )
			return $post_id;

		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )
			return $post_id;

		foreach ( $this->fields as $field ) {
			if ( isset( $_POST[ $field['id'] ] ) ) {
				switch ( $field['type'] ) {
					case 'email':
						$_POST[ $field['id'] ] = sanitize_email( $_POST[ $field['id'] ] );
						break;
					case 'text':
						$_POST[ $field['id'] ] = sanitize_text_field( $_POST[ $field['id'] ] );
						break;
				}
				update_post_meta( $post_id, 'mitarbeiter_informationen_' . $field['id'], $_POST[ $field['id'] ] );
			} else if ( $field['type'] === 'checkbox' ) {
				update_post_meta( $post_id, 'mitarbeiter_informationen_' . $field['id'], '0' );
			}
		}
	}
}
new cpt_team_meta;

function move_cpt_team_meta() {
        # Get the globals:
        global $post, $wp_meta_boxes;

        # Output the "advanced" meta boxes:
        do_meta_boxes( get_current_screen(), 'mitarbeiterinfo', $post );

        # Remove the initial "advanced" meta boxes:
        unset($wp_meta_boxes['post']['mitarbeiterinfo']);
    }

add_action('edit_form_after_title', 'move_cpt_team_meta');
?>
